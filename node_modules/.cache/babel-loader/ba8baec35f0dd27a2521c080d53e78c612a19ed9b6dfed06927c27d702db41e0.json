{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nexport default {\n  name: \"Login\",\n  data: function data() {\n    return {\n      username: \"\",\n      password: \"\",\n      url: \"http://localhost:8080/\"\n    };\n  },\n  methods: {\n    handleSubmit: function handleSubmit() {\n      // ------------------ req for delete ok ---------------\n\n      // -------------- req for user/register ---------------\n      // fetch(\"http://localhost:8080/user/login\", {\n      //   method: \"POST\", // Specify POST method\n      //   headers: {\n      //     \"Content-Type\": \"application/json\", // Indicate JSON data format\n      //   },\n      //   body: JSON.stringify({\n      //     username: \"1\",\n      //     password: \"1\",\n      //     email: \"1@email.com\",\n      //     firstName: \"hh\",\n      //     lastName: \"bb\",\n      //   }), // Stringify your user data object\n      // })\n      //   .then((response) => {\n      //     if (response.status === 201) {\n      //       // Check for successful creation\n      //       return response.json(); // Parse the response body (assuming it's JSON)\n      //     } else {\n      //       throw new Error(\"Registration failed.\"); // Handle other status codes\n      //     }\n      //   })\n      //   .then((user) => {\n      //     // Handle successful registration (e.g., redirect to login, show success message)\n      //     console.log(\"User registered:\", user);\n      //   })\n      //   .catch((error) => {\n      //     // Handle errors (e.g., display error message to user)\n      //     console.error(error);\n      //   });\n      // --------------- req for login ---------------\n      // Replace with your server URL and credentials\n      var url = 'http://your-server.com/user/login';\n      var username = 'yourUsername';\n      var password = 'yourPassword';\n      fetch(url, {\n        method: 'POST',\n        // Use POST for this endpoint\n        headers: {\n          'Content-Type': 'application/json' // Indicate JSON data format\n        },\n        body: JSON.stringify({\n          username: username,\n          // Use variable directly for clarity\n          password: password // Use variable directly for clarity\n        })\n      }).then(function (response) {\n        if (!response.ok) {\n          throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n\n        // Handle successful response based on your expectation\n        return response.text(); // Assuming plain text response, adjust for JSON or other formats\n      }).then(function (data) {\n        console.log('Response:', data);\n        // Process the response data accordingly\n      })[\"catch\"](function (error) {\n        console.error('Error:', error);\n        // Handle errors appropriately (e.g., display error message to user)\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","username","password","url","methods","handleSubmit","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","concat","status","text","console","log","error"],"sources":["/home/drsystem/Documents/term7/Study/database/final_project/kilid-website-frontend/src/views/Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <h2>Login</h2>\n\n    <form class=\"login-form\" @submit.prevent=\"\">\n      <label for=\"username\">Username:</label>\n      <input\n        type=\"text\"\n        id=\"username\"\n        name=\"username\"\n        v-model=\"username\"\n        required\n      />\n\n      <label for=\"password\">Password:</label>\n      <input\n        type=\"password\"\n        id=\"password\"\n        name=\"password\"\n        v-model=\"password\"\n        required\n      />\n\n      <button @click=\"handleSubmit\">Login</button>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Login\",\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      url: \"http://localhost:8080/\",\n    };\n  },\n\n  methods: {\n    handleSubmit() {\n      // ------------------ req for delete ok ---------------\n\n      // -------------- req for user/register ---------------\n      // fetch(\"http://localhost:8080/user/login\", {\n      //   method: \"POST\", // Specify POST method\n      //   headers: {\n      //     \"Content-Type\": \"application/json\", // Indicate JSON data format\n      //   },\n      //   body: JSON.stringify({\n      //     username: \"1\",\n      //     password: \"1\",\n      //     email: \"1@email.com\",\n      //     firstName: \"hh\",\n      //     lastName: \"bb\",\n      //   }), // Stringify your user data object\n      // })\n      //   .then((response) => {\n      //     if (response.status === 201) {\n      //       // Check for successful creation\n      //       return response.json(); // Parse the response body (assuming it's JSON)\n      //     } else {\n      //       throw new Error(\"Registration failed.\"); // Handle other status codes\n      //     }\n      //   })\n      //   .then((user) => {\n      //     // Handle successful registration (e.g., redirect to login, show success message)\n      //     console.log(\"User registered:\", user);\n      //   })\n      //   .catch((error) => {\n      //     // Handle errors (e.g., display error message to user)\n      //     console.error(error);\n      //   });\n      // --------------- req for login ---------------\n      // Replace with your server URL and credentials\nconst url = 'http://your-server.com/user/login';\nconst username = 'yourUsername';\nconst password = 'yourPassword';\n\nfetch(url, {\n  method: 'POST', // Use POST for this endpoint\n  headers: {\n    'Content-Type': 'application/json' // Indicate JSON data format\n  },\n  body: JSON.stringify({\n    username, // Use variable directly for clarity\n    password // Use variable directly for clarity\n  })\n})\n.then(response => {\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  // Handle successful response based on your expectation\n  return response.text(); // Assuming plain text response, adjust for JSON or other formats\n})\n.then(data => {\n  console.log('Response:', data);\n  // Process the response data accordingly\n})\n.catch(error => {\n  console.error('Error:', error);\n  // Handle errors appropriately (e.g., display error message to user)\n});\n\n    },\n  },\n};\n</script>\n\n<style scoped>\n.login-container {\n  background-color: #fff;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  padding: 20px;\n  border-radius: 8px;\n  width: 300px;\n}\n\n.login-container h2 {\n  text-align: center;\n  color: #333;\n}\n\n.login-form {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.login-form label {\n  font-weight: bold;\n}\n\n.login-form input {\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.login-form button {\n  padding: 10px;\n  background-color: #4caf50;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.login-form button:hover {\n  background-color: #45a049;\n}\n</style>\n"],"mappings":";;;;AA6BA,eAAe;EACbA,IAAI,EAAE,OAAO;EACbC,IAAI,WAAAA,KAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,GAAG,EAAE;IACP,CAAC;EACH,CAAC;EAEDC,OAAO,EAAE;IACPC,YAAY,WAAAA,aAAA,EAAG;MACb;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACN,IAAMF,GAAE,GAAI,mCAAmC;MAC/C,IAAMF,QAAO,GAAI,cAAc;MAC/B,IAAMC,QAAO,GAAI,cAAc;MAE/BI,KAAK,CAACH,GAAG,EAAE;QACTI,MAAM,EAAE,MAAM;QAAE;QAChBC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAiB,CAAE;QACrC,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBV,QAAQ,EAARA,QAAQ;UAAE;UACVC,QAAO,EAAPA,QAAO,CAAE;QACX,CAAC;MACH,CAAC,EACAU,IAAI,CAAC,UAAAC,QAAO,EAAK;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,wBAAAC,MAAA,CAAwBH,QAAQ,CAACI,MAAM,CAAE,CAAC;QAC3D;;QAEA;QACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC,EAAE;MAC1B,CAAC,EACAN,IAAI,CAAC,UAAAZ,IAAG,EAAK;QACZmB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEpB,IAAI,CAAC;QAC9B;MACF,CAAC,UACK,CAAC,UAAAqB,KAAI,EAAK;QACdF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9B;MACF,CAAC,CAAC;IAEE;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}